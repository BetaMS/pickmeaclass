[{"C:\\Users\\User\\Documents\\Projects\\pickmeaclass\\pickmeaclass\\src\\index.js":"1","C:\\Users\\User\\Documents\\Projects\\pickmeaclass\\pickmeaclass\\src\\App.js":"2","C:\\Users\\User\\Documents\\Projects\\pickmeaclass\\pickmeaclass\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":9059,"mtime":1612511186193,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mvyvmz",{"filePath":"11","messages":"12","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\Projects\\pickmeaclass\\pickmeaclass\\src\\index.js",[],["16","17"],"C:\\Users\\User\\Documents\\Projects\\pickmeaclass\\pickmeaclass\\src\\App.js",["18","19","20","21","22","23"],"import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport theData from './5e.json';\n\n//All images used below are copyrighted by Wizards of the Coast\nimport artificer from './images/Artificer.png';\nimport barbarian from './images/Barbarian.png';\nimport bard from './images/Bard.png';\nimport cleric from './images/Cleric.png';\nimport druid from './images/Druid.png';\nimport fighter from './images/Fighter.png';\nimport monk from './images/Monk.png';\nimport paladin from './images/Paladin.png';\nimport ranger from './images/Ranger.png';\nimport rogue from './images/Rogue.png';\nimport sorcerer from './images/Sorcerer.png';\nimport warlock from './images/Warlock.png';\nimport wizard from './images/Wizard.png';\nimport restart from './images/restart.png';\n\nimport artificerx from './images/Artificerx.png';\nimport barbarianx from './images/Barbarianx.png';\nimport bardx from './images/Bardx.png';\nimport clericx from './images/Clericx.png';\nimport druidx from './images/Druidx.png';\nimport fighterx from './images/Fighterx.png';\nimport monkx from './images/Monkx.png';\nimport paladinx from './images/Paladinx.png';\nimport rangerx from './images/Rangerx.png';\nimport roguex from './images/Roguex.png';\nimport sorcererx from './images/Sorcererx.png';\nimport warlockx from './images/Warlockx.png';\nimport wizardx from './images/Wizardx.png';\n\n//This coffee icon is copyright of AomAm on Sotckio.\nimport coffee from './images/coffee.png';\n\n//These icons belong to github and twitter\nimport github from './images/github-icon.png'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      isFinished: false,\n      question: \"Pick a class for DnD 5e?\",\n      one: \"Sure\",\n      two: \"Nah\",\n      oneValue: 14,\n      twoValue: 35,\n      whichEdition: 5,\n      data: []\n    }\n\n    this.onButtonClick = this.onButtonClick.bind(this);\n  }\n\n  /*\n    This method changes the data on the screen depending on the value passed when a button is clicked.\n  */\n  onButtonClick(val){\n\n    var currentQuestion = this.state.data[val];\n\n    //Checks to see if the data is a finish or a question\n    if(currentQuestion[0] === 0){\n      this.setState({\n        isFinished: false\n      });\n    }\n    else{\n      this.setState({\n        isFinished: true\n      });\n    }\n    //Sets the data\n    this.setState({\n      question: currentQuestion[1],\n      one: currentQuestion[2],\n      two: currentQuestion[3],\n      oneValue: currentQuestion[4],\n      twoValue: currentQuestion[5]\n    });\n  }\n\n  //Fills the data state with the data from the 5e json\n  fillData(){\n    var newData = theData;\n\n    this.setState({data: newData});\n  }\n\n  //Runs when component is mounted and runs fillData\n  componentDidMount(){\n    this.fillData();\n  }\n\n  render(){\n\n    //Booleans for icon logic. Yes this is a little janky and no one should have to explain their logic this much... But it works...  \n    let nextValue = this.state.oneValue;\n\n    //This is the boolean that tells us if we're on a class description or on a question.\n    let isFinished = this.state.isFinished;\n\n    //This covers the logic for making sure the icons are on for the first two questions\n    let base = ((nextValue === 14 && this.state.twoValue < 36) || nextValue === 25);\n    let noMagic = nextValue === 16;\n    let magic = nextValue === 26;\n    let outOfRange = nextValue === 0;\n    \n\n    //These are the logic to make sure that the individual icons stay on when they neeed to be on.\n    let paladinRange = (nextValue > 13 && nextValue <= 18 && this.state.twoValue < 36) || nextValue === 25;\n    let rangerRange = (nextValue > 13 && nextValue <= 18 && this.state.twoValue < 36) || nextValue === 25;\n    let monkRange = (nextValue > 18 && nextValue <= 20) || nextValue === 25;\n    let barbarianRange = nextValue > 18 && nextValue <= 21;\n    let rogueRange = nextValue > 18 && nextValue <= 22;\n    let fighterRange = nextValue > 18 && nextValue <= 25;\n\n    //These are the logic for checking if an individual class is next.\n    let artificerNext = nextValue === 1;\n    let barbarianNext = nextValue === 2;\n    let bardNext = nextValue === 3;\n    let clericNext = nextValue === 4;\n    let druidNext = nextValue === 5;\n    let fighterNext = nextValue === 6;\n    let monkNext = nextValue === 7;\n    let paladinNext = nextValue === 8;\n    let rangerNext = nextValue === 9;\n    let rogueNext = nextValue === 10;\n    let sorcererNext = nextValue === 11;\n    let warlockNext = nextValue === 12;\n    let wizardNext = nextValue === 13;\n\n    //These are the logic for making sure icons stay on for classes that come after others. This isn't needed for classes that come last.\n    let paladinOn = (paladinNext && !isFinished);\n    let monkOn = (monkNext && !isFinished);\n    let barbarianOn = (barbarianNext && !isFinished);\n    let rogueOn = (rogueNext && !isFinished);\n    let clericOn = (clericNext && !isFinished);\n    let artificerOn = (artificerNext && !isFinished);\n    let druidOn = (druidNext && !isFinished);\n    let druidOn2 = druidOn && this.state.twoValue !== 32;\n    let bardOn = (bardNext && !isFinished);\n    let warlockOn = (warlockNext && !isFinished);\n    let sorcererOn = (sorcererNext && !isFinished);\n    \n\n    //This is where all the logic from above comes together to make sure that the icons are on or off when they need too be.\n    let artificerValid = base || magic || druidOn2 || clericOn || artificerNext;\n    let barbarianValid = base || noMagic || barbarianRange || (monkNext && !isFinished) || barbarianNext;\n    let bardValid = base || magic || druidOn2 || clericOn || artificerOn || bardNext;\n    let clericValid = base || magic || druidOn2 || clericNext;\n    let druidValid = base || magic || druidNext || clericOn || artificerOn || bardOn;\n    let fighterValid = base || noMagic || fighterRange || monkOn || rogueOn || barbarianOn || fighterNext;\n    let monkValid = base || noMagic || monkRange || monkNext;\n    let paladinValid = (paladinRange || paladinNext) || outOfRange;\n    let rangerValid = rangerRange || paladinOn || rangerNext;\n    let rogueValid = base || noMagic || rogueRange || monkOn || barbarianOn || rogueNext;\n    let sorcererValid = base || magic || druidOn || clericOn || artificerOn || bardNext || warlockOn || sorcererNext;\n    let warlockValid = base || magic || druidOn || clericOn || artificerOn || bardNext || warlockNext;\n    let wizardValid = base || magic || druidOn || clericOn || artificerOn || bardNext || warlockOn || sorcererOn || wizardNext;\n\n    document.title = \"Pick Me A Class\" \n\n    //Checks the isFinished boolean, which is set depending on data passed from the json\n    return(\n      <main>\n        <header>\n          <img src={artificerValid ? artificerx : artificer} alt=\"artificer\" className=\"D20\"/>\n          <img src={barbarianValid ? barbarianx : barbarian} alt=\"barbarian\" className=\"D20\"/>\n          <img src={bardValid ? bardx : bard} alt=\"bard\" className=\"D20\"/>\n          <img src={clericValid ? clericx : cleric} alt=\"cleric\" className=\"D20\"/>\n          <img src={druidValid ? druidx : druid} alt=\"druid\" className=\"D20\"/> \n          <img src={fighterValid ? fighterx : fighter} alt=\"fighter\" className=\"D20\"/> \n          <img src={monkValid ? monkx : monk} alt=\"monk\" className=\"D20\"/> \n          <img src={paladinValid ? paladinx : paladin} alt=\"paladin\" className=\"D20\"/> \n          <img src={rangerValid ? rangerx : ranger} alt=\"ranger\" className=\"D20\"/> \n          <img src={rogueValid ? roguex : rogue} alt=\"rogue\" className=\"D20\"/> \n          <img src={sorcererValid ? sorcererx : sorcerer} alt=\"sorcerer\" className=\"D20\"/> \n          <img src={warlockValid ? warlockx : warlock} alt=\"warlock\" className=\"D20\"/> \n          <img src={wizardValid ? wizardx : wizard} alt=\"wizard\" className=\"D20\"/> \n        </header>\n\n        <section className=\"Container\">\n          <div className=\"title\">\n            { !this.state.isFinished ? <h2>{this.state.question}</h2> : <h2><a href={this.state.two} target=\"_blank\">{this.state.question}</a></h2>}\n          </div>\n          { !this.state.isFinished ?\n            <div className=\"buttonGroup\"> \n              <button className=\"qBut\" onClick={ () => this.onButtonClick(this.state.oneValue)}>{this.state.one}</button> \n              <button className=\"qBut\" onClick={ () => this.onButtonClick(this.state.twoValue)}>{this.state.two}</button>\n            </div>\n            : <div className=\"paragraph\">\n                <p>{this.state.one}</p>\n                <button onClick={ () => this.onButtonClick(this.state.twoValue)} className=\"restartButton\"><img src={restart} alt=\"d20 image\" className=\"restartImage\"/></button>\n              </div>\n          }\n        </section> \n          \n        <div className=\"coffeeMaker\"><a href=\"https://github.com/BetaMS/pickmeaclass\" target=\"_blank\"><img src={github} className=\"icon\"/></a><a href=\"https://www.paypal.com/donate?business=X3UK3AGW8U2VW&currency_code=CAD\" target=\"_blank\" className=\"coffeeButton\">Buy me a coffee?</a></div>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","C:\\Users\\User\\Documents\\Projects\\pickmeaclass\\pickmeaclass\\src\\reportWebVitals.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":37,"column":8,"nodeType":"30","messageId":"31","endLine":37,"endColumn":14},{"ruleId":"32","severity":1,"message":"33","line":190,"column":77,"nodeType":"34","endLine":190,"endColumn":118},{"ruleId":"35","severity":1,"message":"36","line":199,"column":108,"nodeType":"34","endLine":199,"endColumn":169},{"ruleId":"32","severity":1,"message":"33","line":204,"column":38,"nodeType":"34","endLine":204,"endColumn":103},{"ruleId":"37","severity":1,"message":"38","line":204,"column":103,"nodeType":"34","endLine":204,"endColumn":139},{"ruleId":"32","severity":1,"message":"33","line":204,"column":143,"nodeType":"34","endLine":204,"endColumn":265},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'coffee' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]